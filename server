#!/bin/bash
#
# A platform agnostic Scylla server installation script.
#
#  Options:
#  [--scylla-product scylla|scylla-enterprise] Scylla product to install (default: scylla)
#  [--scylla-version <version>]                Scylla version to install
#
#  To install latest official version, run:
#
#    curl -sSf get.scylladb.com/server | sudo bash
#
#  To install a specific (stable) version, run:
#
#    curl -sSf get.scylladb.com/server | sudo bash -s -- --scylla-version 4.1.0
#
#  To install latest nightly version (for the brave), run:
#
#    curl -sSf get.scylladb.com/server | sudo bash -s -- --scylla-version nightly-version
#    version examples:
#       --scylla-version nightly-master will install master latest nightly version
#       --scylla-version nightly-4.5 will install 4.5 latest nightly version
#       For enterprise product:
#       --scylla-version nightly-enterprise will install enterprise latest nightly version
#       --scylla-version nightly-2021.1 will install 2021.1 latest nightly version
#
# Flags:
# -h, --help - Prints help information
#
# DEBUG OPTIONS:
# [--scylla-base-url <url>] URL to test installation from a testing URL.
# DEBUG FLAGS:
# [--debug-run] - use slim/minimal dockers when needed, and skip epel installation.
# [--dry-run] -   Prints out commands instead of executing them.
# [--verbose] -   Runs install commands with no quiet option, and more info.
#
# This file is open source software, licensed to you under the terms
# of the Apache License, Version 2.0 (the "License").  See the NOTICE file
# distributed with this work for additional information regarding copyright
# ownership.  You may not use this file except in compliance with the License.
#
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

set -euo pipefail
shopt -s extglob

check_arch() {
  ARCH=$(uname -m)

  if [[ "$ARCH" != "x86_64" ]]; then
    echo "Architecture $ARCH is not supported by this installer."
    exit 1
  fi
}

check_os() {
  OS=$(uname -s)

  case "$OS" in
    Linux)   ;;
    *)        echo -e "Your operating system $OS is not supported by this installer.\n\nPlease consider using Docker to run Scylla on this machine:\n\nhttps://hub.docker.com/r/scylladb/scylla" && exit 1 ;;
  esac
}

echo_msg() {
  if [ $DRY_RUN -eq 0 ]; then
    echo $*
  fi
}

run_cmd() {
  CMD=("$@")
  if [ $DRY_RUN -eq 0 ]; then
    "${CMD[@]}"
  else
    echo "${CMD[@]}"
  fi
}

check_product() {
  case "$SCYLLA_PRODUCT" in
    "scylla")
      VERSION_CHECK_SYSTEM="scylla"
      BRANCH_WORD="branch-"
      ;;
    "scylla-enterprise")
      VERSION_CHECK_SYSTEM="enterprise"
      BRANCH_WORD="enterprise-"
      ;;
    *)
      echo "The product '$SCYLLA_PRODUCT' is not supported by this installer."
      exit 1
      ;;
  esac
}

is_rc_version() {
  if [[ $SCYLLA_VERSION == *rc* ]]; then
    # replace the 2nd '.' with '~' for RC versions, ex. 4.6.rc0 -> 4.6~rc0
    SCYLLA_VERSION=$(echo $SCYLLA_VERSION | sed 's/\(.*\)\.)*/\1~/')
  fi
}

query_default_version() {
  DEFAULT_SCYLLA_VERSION_RAW=$(curl -s https://repositories.scylladb.com/scylla/check_version?system=$VERSION_CHECK_SYSTEM)

  DEFAULT_SCYLLA_VERSION=$(echo $DEFAULT_SCYLLA_VERSION_RAW | sed -e "s/.*version\":\"\(.*\)\".*/\1/g")
}

set_gpg_key() {
  SCYLLA_RELEASE=$(echo $SCYLLA_VERSION | cut -d'-' -f 2)
  if [ $SCYLLA_RELEASE == "master" ] || [ $SCYLLA_RELEASE == "enterprise" ] || [[ "$SCYLLA_VERSION" == *"5.0"* ]]; then
    SCYLLA_GPG_KEY="d0a112e067426ab2"
  else
    SCYLLA_GPG_KEY="5e08fbd8b5d6ec9c"
  fi
}

setup_install() {
  set_gpg_key
  if [[ $SCYLLA_VERSION == *"nightly"* ]]; then
    SCYLLA_RELEASE=$(echo $SCYLLA_VERSION | cut -d'-' -f 2)
    if [ $SCYLLA_RELEASE == "master" ] || [ $SCYLLA_RELEASE == "enterprise" ]; then
      BRANCH_WORD=""
    fi
    if [ $1 == "debian" ]; then
      SCYLLA_DEBIAN_URL="$SCYLLA_BASE_URL/unstable/$SCYLLA_PRODUCT/$BRANCH_WORD$SCYLLA_RELEASE/deb/unified/latest/scylladb-$SCYLLA_RELEASE/scylla.list"
      SCYLLA_DEBIAN_PRODUCT_VERSION=$SCYLLA_PRODUCT
    elif [ $1 == "ubuntu" ]; then
      SCYLLA_UBUNTU_URL="$SCYLLA_BASE_URL/unstable/$SCYLLA_PRODUCT/$BRANCH_WORD$SCYLLA_RELEASE/deb/unified/latest/scylladb-$SCYLLA_RELEASE/scylla.list"
      SCYLLA_UBUNTU_PRODUCT_VERSION=$SCYLLA_PRODUCT
    else
      set_rpm_install_tool
      SCYLLA_RPM_URL="$SCYLLA_BASE_URL/unstable/$SCYLLA_PRODUCT/$BRANCH_WORD$SCYLLA_RELEASE/rpm/centos/latest/scylla.repo"
      SCYLLA_RPM_PRODUCT_VERSION=$SCYLLA_PRODUCT
    fi
  else
    SCYLLA_RELEASE=$(echo $SCYLLA_VERSION | sed -e "s/\([[:digit:]]\+.[[:digit:]]\+\).*/\1/g")
    if [ $1 == "debian" ]; then
      is_rc_version
      SCYLLA_DEBIAN_URL="$SCYLLA_BASE_URL/deb/debian/scylla-$SCYLLA_RELEASE-$VERSION_CODENAME.list"
      SCYLLA_DEBIAN_PRODUCT_VERSION="${SCYLLA_PRODUCT}=$SCYLLA_VERSION*"
    elif [ $1 == "ubuntu" ]; then
      is_rc_version
      SCYLLA_UBUNTU_URL="$SCYLLA_BASE_URL/deb/ubuntu/scylla-$SCYLLA_RELEASE-$VERSION_CODENAME.list"
      SCYLLA_UBUNTU_PRODUCT_VERSION="${SCYLLA_PRODUCT}=$SCYLLA_VERSION*"
    else
      set_rpm_install_tool
      SCYLLA_RPM_URL="$SCYLLA_BASE_URL/rpm/centos/scylla-$SCYLLA_RELEASE.repo"
      SCYLLA_RPM_PRODUCT_VERSION="$SCYLLA_PRODUCT-$SCYLLA_VERSION"
    fi
  fi
}

main() {
  require_cmd curl

  DRY_RUN=0
  SCYLLA_BASE_URL="http://downloads.scylladb.com"
  DEBUG_RUN=0
  VERBOSE=0

  USAGE=0

  DEFAULT_SCYLLA_PRODUCT="scylla"
  SCYLLA_PRODUCT="$DEFAULT_SCYLLA_PRODUCT"

  SCYLLA_VERSION=""

  while [ $# -gt 0 ]; do
    case "$1" in
      "-h" | "--help")
        USAGE=1
        shift 1
        ;;
      "--scylla-product")
        SCYLLA_PRODUCT="$2"
        shift 2
        ;;
      "--scylla-version")
        SCYLLA_VERSION="$2"
        shift 2
        ;;
      "--dry-run")
        DRY_RUN=1
        shift 1
        ;;
      "--debug-run")
        DEBUG_RUN=1
        shift 1
        ;;
      "--scylla-base-url")
        SCYLLA_BASE_URL="$2"
        shift 2
        ;;
      "--verbose")
        VERBOSE=1
        shift 1
        ;;
      *)
        USAGE=1
        shift 1
        ;;
    esac
  done

  RETRY_OPTION="-o Acquire::Retries=3"
  if [ $VERBOSE -eq 1 ]; then
    YUM_QUIET_CMD_PARAM="--assumeyes"
    APT_FLAGS="--assume-yes $RETRY_OPTION"
  else
    YUM_QUIET_CMD_PARAM="--assumeyes --quiet"
    APT_FLAGS="-qq $RETRY_OPTION"
  fi

  check_product
  if [ -z "$SCYLLA_VERSION" ]; then
    query_default_version

    SCYLLA_VERSION="$DEFAULT_SCYLLA_VERSION"
  fi

  if [ $USAGE -eq 1 ]; then
    usage
    exit 1
  fi

  check_arch

  check_os

  # os-release may be missing in container environment by default.
  if [ -f "/etc/os-release" ]; then
      . /etc/os-release
  elif [ -f "/etc/arch-release" ]; then
      export ID=arch
  else
      echo "/etc/os-release missing."
      exit 1
  fi

  setup_install $ID

  case "$ID" in
    "amzn") amzn_install ;;
    "centos") centos_install ;;
    "debian") debian_install ;;
    "fedora") fedora_install ;;
    "ol") ol_install ;;
    "rhel") rhel_install ;;
    "ubuntu") ubuntu_install ;;
    *) echo "Operating system '$ID' is not supported by this installer." && exit 1
  esac

  echo_msg "Scylla installation done!"
}

usage() {
  cat 1>&2 <<EOF
scylla-get
The platform agnostic installer for Scylla.

USAGE:
    scylla-get [FLAGS] [OPTIONS]

FLAGS:
    -h, --help              Prints help information

OPTIONS:
  [--scylla-product scylla|scylla-enterprise] - Scylla product to install (default: $DEFAULT_SCYLLA_PRODUCT)
  [--scylla-version <version>] - Scylla version to install (default: $DEFAULT_SCYLLA_VERSION)
  Version examples:
    --scylla-version nightly-master will install master latest nightly version
    --scylla-version nightly-4.5 will install 4.5 latest nightly version
    For enterprise product:
    --scylla-version nightly-enterprise will install enterprise latest nightly version
    --scylla-version nightly-2021.1 will install 2021.1 latest nightly version

DEBUG OPTIONS:
  [--scylla-base-url <url>] URL to test installation from a testing URL.

DEBUG FLAGS:
  [--debug-run] - use slim/minimal dockers when needed, and skip epel installation.
  [--dry-run] -   Prints out commands instead of executing them.
  [--verbose] -   Runs install commands with no quiet option, and more info.

EOF
}

require_cmd() {
  CMD=$1
  if ! command -v "$CMD" &> /dev/null
  then
    echo "Please make sure '$CMD' is installed on this machine."
    exit
  fi
}

set_rpm_install_tool() {
  RPM_INSTALL_TOOL="yum"
  if [ $DEBUG_RUN -eq 1 ]; then
    RPM_INSTALL_TOOL="microdnf"
  fi
  require_cmd $RPM_INSTALL_TOOL
}

install_rpm() {
  ret=0
  run_cmd curl -f -s -L -o /etc/yum.repos.d/scylla.repo "$SCYLLA_RPM_URL" || ret=$?
  if [ $ret -ne 0 ]; then
    echo "Your OS is not supported by this installer because there is no package repository."
    exit 1
  fi
  run_cmd $RPM_INSTALL_TOOL install $YUM_QUIET_CMD_PARAM $SCYLLA_RPM_PRODUCT_VERSION
}

check_amzn_version() {
  case "$VERSION_ID" in
    "2")
      return 1
      ;;
    *)
      return 0
      ;;
  esac
}

amzn_install() {
  if check_amzn_version = 0; then
    echo "Amazon Linux $VERSION_ID is not supported by this installer."
    exit 1
  fi
  echo_msg "Installing Scylla version $SCYLLA_VERSION for Amazon Linux ..."
  set_rpm_install_tool
  install_rpm
}

check_centos_version() {
  case "$VERSION_ID" in
    "7"|"8")
      return 1
      ;;
    *)
      return 0
      ;;
  esac
}

centos_install() {
  if check_centos_version = 0; then
    echo "CentOS $VERSION_ID is not supported by this installer."
    exit 1
  fi
  set_rpm_install_tool
  echo_msg "Installing Scylla version $SCYLLA_VERSION for CentOS ..."
  run_cmd $RPM_INSTALL_TOOL install $YUM_QUIET_CMD_PARAM epel-release
  install_rpm
}

fedora_install() {
  echo_msg "Installing Scylla version $SCYLLA_VERSION for Fedora ..."
  set_rpm_install_tool
  install_rpm
}

check_rhel_version() {
  case "$VERSION_ID" in
    7.?|8.?)
      return 1
      ;;
    *)
      return 0
      ;;
  esac
}

rhel_install() {
  if check_rhel_version = 0; then
    echo "Red Hat Enterprise Linux $VERSION_ID is not supported by this installer."
    exit 1
  fi
  echo_msg "Installing Scylla version $SCYLLA_VERSION for Red Hat Enterprise Linux ..."
  set_rpm_install_tool
  if [ $DEBUG_RUN -eq 0 ]; then
    run_cmd $RPM_INSTALL_TOOL install $YUM_QUIET_CMD_PARAM https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
  fi
  install_rpm
}

check_ol_version() {
  case "$VERSION_ID" in
    7.?|8.?)
      return 1
      ;;
    *)
      return 0
      ;;
  esac
}

ol_install() {
  if check_ol_version = 0; then
    echo "Oracle Linux $VERSION_ID is not supported by this installer."
    exit 1
  fi
  echo_msg "Installing Scylla version $SCYLLA_VERSION for Oracle Linux ..."
  set_rpm_install_tool
  if [ $DEBUG_RUN -eq 0 ]; then
    run_cmd $RPM_INSTALL_TOOL install $YUM_QUIET_CMD_PARAM https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
  fi
  install_rpm
}

check_debian_version() {
  case "$VERSION_ID" in
    "9"|"10"|"11")
      return 1
      ;;
    *)
      return 0
      ;;
  esac
}

debian_install() {
  if check_debian_version = 0; then
    echo "Debian $VERSION_ID is not supported by this installer."
    exit 1
  fi
  export DEBIAN_FRONTEND=noninteractive
  run_cmd apt update
  run_cmd apt-get install $APT_FLAGS apt-transport-https curl gnupg2 dirmngr
  ret=0
  run_cmd curl -f -s -L -o /etc/apt/sources.list.d/scylla.list "$SCYLLA_DEBIAN_URL" || ret=$?
  if [ $ret -ne 0 ]; then
    echo "Your OS is not supported by this installer because there is no package repository."
    exit 1
  fi
  echo_msg "Installing Scylla version $SCYLLA_VERSION for Debian ..."
  run_cmd apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $SCYLLA_GPG_KEY
  run_cmd apt update
  run_cmd apt-get install $APT_FLAGS $SCYLLA_DEBIAN_PRODUCT_VERSION
}

check_ubuntu_version() {
  case "$VERSION_ID" in
    "16.04"|"18.04"|"20.04")
      return 1
      ;;
    *)
      return 0
      ;;
  esac
}

ubuntu_install() {
  if check_ubuntu_version = 0; then
    echo "Ubuntu $VERSION_ID is not supported by this installer."
    exit 1
  fi
  export DEBIAN_FRONTEND=noninteractive
  run_cmd apt update
  if [ "$VERSION_ID" = "16.04" ]; then
    run_cmd apt-get install $APT_FLAGS curl gnupg2 apt-transport-https
  else
    run_cmd apt-get install $APT_FLAGS curl gnupg2
  fi
  ret=0
  run_cmd curl -f -s -L -o /etc/apt/sources.list.d/scylla.list "$SCYLLA_UBUNTU_URL" || ret=$?
  if [ $ret -ne 0 ]; then
    echo "Your OS is not supported by this installer because there is no package repository."
    exit 1
  fi
  echo_msg "Installing Scylla version $SCYLLA_VERSION for Ubuntu ..."
  run_cmd apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $SCYLLA_GPG_KEY
  run_cmd apt update
  run_cmd apt-get install $APT_FLAGS $SCYLLA_UBUNTU_PRODUCT_VERSION
}

main "$@"
